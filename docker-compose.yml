version: "3.8"

services:
  # Traefik - Dynamic Reverse Proxy & Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: traefik
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80" # expose HTTP
      - "8081:8080" # Traefik dashboard (optional)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  # RabbitMQ Service
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"

  # Redis Service
  redis:
    image: redis:6-alpine
    container_name: redis
    ports:
      - "6379:6379"

  # Auth Service API
  auth-api:
    build:
      context: ./auth-service
      dockerfile: src/Dockerfile
    container_name: auth-api
    volumes:
      - ./auth-service:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - REDIS_URL=redis://redis:6379
      - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
    depends_on:
      - rabbitmq
      - redis
    command: node src/index.js
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=PathPrefix(`/auth`)"
      - "traefik.http.services.auth.loadbalancer.server.port=3000"

  # Auth Service Worker (not exposed via Traefik)
  auth-worker:
    build:
      context: ./auth-service
      dockerfile: src/Dockerfile
    container_name: auth-worker
    volumes:
      - ./auth-service:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - REDIS_URL=redis://redis:6379
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
    depends_on:
      - rabbitmq
      - redis
    command: node src/workers/email.worker.js

  # Post Service API
  post-api:
    build:
      context: ./post-service
      dockerfile: src/Dockerfile
    container_name: post-api
    volumes:
      - ./post-service:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - REDIS_URL=redis://redis:6379
      - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
    depends_on:
      - rabbitmq
      - redis
    command: node src/index.js
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.post.rule=PathPrefix(`/post`)"
      - "traefik.http.services.post.loadbalancer.server.port=3001"

  # Post Service Worker (not exposed via Traefik)
  post-worker:
    build:
      context: ./post-service
      dockerfile: src/Dockerfile
    container_name: post-worker
    volumes:
      - ./post-service:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - REDIS_URL=redis://redis:6379
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - PINECONE_INDEX=${PINECONE_INDEX}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
    depends_on:
      - rabbitmq
      - redis
    command: node src/workers/embedding.worker.js

  # Search Service API
  search-api:
    build:
      context: ./search-service
      dockerfile: src/Dockerfile
    container_name: search-api
    volumes:
      - ./search-service:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3002
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - REDIS_URL=redis://redis:6379
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    depends_on:
      - rabbitmq
      - redis
    command: node src/index.js
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.search.rule=PathPrefix(`/search`)"
      - "traefik.http.services.search.loadbalancer.server.port=3002"

  # Search Service Worker (not exposed via Traefik)
  search-worker:
    build:
      context: ./search-service
      dockerfile: src/Dockerfile
    container_name: search-worker
    volumes:
      - ./search-service:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - REDIS_URL=redis://redis:6379
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_INDEX=${PINECONE_INDEX}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    depends_on:
      - rabbitmq
      - redis
    command: node src/workers/search.worker.js

volumes:
  rabbitmq_data:
  redis_data:
